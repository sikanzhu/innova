// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: innova_protocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Innova.Protocol {

  /// <summary>Holder for reflection information generated from innova_protocol.proto</summary>
  public static partial class InnovaProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for innova_protocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InnovaProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVpbm5vdmFfcHJvdG9jb2wucHJvdG8SD2lubm92YS5wcm90b2NvbBoTaW5u",
            "b3ZhX2NvbW1vbi5wcm90byIXCgZSZWdpb24SDQoFaW5kZXgYASABKAkiQwoM",
            "UmVnaW9uSWRQYWlyEicKBnJlZ2lvbhgBIAEoCzIXLmlubm92YS5wcm90b2Nv",
            "bC5SZWdpb24SCgoCaWQYAiABKAMiJAoHSWRQdHlwZRIKCgJpZBgBIAEoAxIN",
            "CgVwdHlwZRgCIAEoBSIkCgdJZEN0eXBlEgoKAmlkGAEgASgDEg0KBWN0eXBl",
            "GAIgASgFIjYKC0lkQ3R5cGVEYXRhEgoKAmlkGAEgASgDEg0KBWN0eXBlGAIg",
            "ASgFEgwKBGRhdGEYAyABKAwiNgoLSWRQdHlwZURhdGESCgoCaWQYASABKAMS",
            "DQoFcHR5cGUYAiABKAUSDAoEZGF0YRgDIAEoDCJTCgVBY3RvchIKCgJpZBgB",
            "IAEoAxIOCgZwdHlwZXMYAiADKAUSDgoGcGRhdGFzGAMgAygMEg4KBmN0eXBl",
            "cxgEIAMoBRIOCgZjZGF0YXMYBSADKAwiMwoJQWN0b3JMaXN0EiYKBmFjdG9y",
            "cxgBIAMoCzIWLmlubm92YS5wcm90b2NvbC5BY3RvciJhCg9SZWdpb25BY3Rv",
            "clBhaXISJwoGcmVnaW9uGAEgASgLMhcuaW5ub3ZhLnByb3RvY29sLlJlZ2lv",
            "bhIlCgVhY3RvchgCIAEoCzIWLmlubm92YS5wcm90b2NvbC5BY3RvciIVCgZJ",
            "ZExpc3QSCwoDaWRzGAEgAygDIkMKCU9wZXJhdGlvbhILCgNzcmMYASABKAMS",
            "DAoEZGVzdBgCIAEoAxINCgVwdHlwZRgDIAEoBRIMCgRkYXRhGAQgASgMIswE",
            "CgxQbGF5ZXJUb0dhdGUSMQoEdHlwZRgBIAEoDjIjLmlubm92YS5wcm90b2Nv",
            "bC5QbGF5ZXJUb0dhdGUuRVRZUEUSFAoMbWFnaWNfbnVtYmVyGAIgASgFEjEK",
            "EHdhdGNoaW5nX3JlZ2lvbnMYZSADKAsyFy5pbm5vdmEucHJvdG9jb2wuUmVn",
            "aW9uEjEKD2VudGVyZWRfcmVnaW9ucxjJASADKAsyFy5pbm5vdmEucHJvdG9j",
            "b2wuUmVnaW9uEjMKDmVudGVyZWRfYWN0b3JzGMoBIAMoCzIaLmlubm92YS5w",
            "cm90b2NvbC5BY3Rvckxpc3QSMAoOZXhpdGVkX3JlZ2lvbnMYkQMgAygLMhcu",
            "aW5ub3ZhLnByb3RvY29sLlJlZ2lvbhIvCg1leGl0ZWRfYWN0b3JzGJIDIAMo",
            "CzIXLmlubm92YS5wcm90b2NvbC5JZExpc3QSLgoNdXBkYXRlX2FjdG9ycxit",
            "AiADKAsyFi5pbm5vdmEucHJvdG9jb2wuQWN0b3ISNAoPcHVzaF9vcGVyYXRp",
            "b25zGPUDIAMoCzIaLmlubm92YS5wcm90b2NvbC5PcGVyYXRpb24SMwoQcmVx",
            "dWVzdF9wcm9wZXJ0eRjZBCADKAsyGC5pbm5vdmEucHJvdG9jb2wuSWRQdHlw",
            "ZRIxCg5yZXF1ZXN0X2NvbmZpZxjaBCADKAsyGC5pbm5vdmEucHJvdG9jb2wu",
            "SWRDdHlwZSInCgVFVFlQRRIICgROVUxMEAASCwoHTUVTU0FHRRABEgcKA05V",
            "TRACIoQDCgxHYXRlVG9QbGF5ZXISMQoEdHlwZRgBIAEoDjIjLmlubm92YS5w",
            "cm90b2NvbC5HYXRlVG9QbGF5ZXIuRVRZUEUSEgoKd29ybGRfdGltZRgCIAEo",
            "AxItCgZleGl0ZWQYZSADKAsyHS5pbm5vdmEucHJvdG9jb2wuUmVnaW9uSWRQ",
            "YWlyEjIKB3VwZGF0ZWQYyQEgAygLMiAuaW5ub3ZhLnByb3RvY29sLlJlZ2lv",
            "bkFjdG9yUGFpchIvCgpvcGVyYXRpb25zGK0CIAMoCzIaLmlubm92YS5wcm90",
            "b2NvbC5PcGVyYXRpb24SOAoRcmVzcG9uc2VfcHJvcGVydHkYkQMgAygLMhwu",
            "aW5ub3ZhLnByb3RvY29sLklkUHR5cGVEYXRhEjYKD3Jlc3BvbnNlX2NvbmZp",
            "ZxiSAyADKAsyHC5pbm5vdmEucHJvdG9jb2wuSWRDdHlwZURhdGEiJwoFRVRZ",
            "UEUSCAoETlVMTBAAEgsKB01FU1NBR0UQARIHCgNOVU0QAiJYCg1Mb2dpblRv",
            "UGxheWVyEjIKBHR5cGUYASABKA4yJC5pbm5vdmEucHJvdG9jb2wuTG9naW5U",
            "b1BsYXllci5FVFlQRSITCgVFVFlQRRIKCgZBQ0NFUFQQACJXCg1QbGF5ZXJU",
            "b0xvZ2luEjIKBHR5cGUYASABKA4yJC5pbm5vdmEucHJvdG9jb2wuUGxheWVy",
            "VG9Mb2dpbi5FVFlQRSISCgVFVFlQRRIJCgVMT0dJThAAImQKCldvcmxkV3Jp",
            "dGUSLwoEdHlwZRgBIAEoDjIhLmlubm92YS5wcm90b2NvbC5Xb3JsZFdyaXRl",
            "LkVUWVBFEhIKCndvcmxkX3RpbWUYAiABKAMiEQoFRVRZUEUSCAoEUElORxAA",
            "Ik4KCVdvcmxkUmVhZBIuCgR0eXBlGAEgASgOMiAuaW5ub3ZhLnByb3RvY29s",
            "LldvcmxkUmVhZC5FVFlQRSIRCgVFVFlQRRIICgRQT05HEABiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Innova.Common.InnovaCommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Innova.Protocol.Region), global::Innova.Protocol.Region.Parser, new[]{ "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Innova.Protocol.RegionIdPair), global::Innova.Protocol.RegionIdPair.Parser, new[]{ "Region", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Innova.Protocol.IdPtype), global::Innova.Protocol.IdPtype.Parser, new[]{ "Id", "Ptype" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Innova.Protocol.IdCtype), global::Innova.Protocol.IdCtype.Parser, new[]{ "Id", "Ctype" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Innova.Protocol.IdCtypeData), global::Innova.Protocol.IdCtypeData.Parser, new[]{ "Id", "Ctype", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Innova.Protocol.IdPtypeData), global::Innova.Protocol.IdPtypeData.Parser, new[]{ "Id", "Ptype", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Innova.Protocol.Actor), global::Innova.Protocol.Actor.Parser, new[]{ "Id", "Ptypes", "Pdatas", "Ctypes", "Cdatas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Innova.Protocol.ActorList), global::Innova.Protocol.ActorList.Parser, new[]{ "Actors" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Innova.Protocol.RegionActorPair), global::Innova.Protocol.RegionActorPair.Parser, new[]{ "Region", "Actor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Innova.Protocol.IdList), global::Innova.Protocol.IdList.Parser, new[]{ "Ids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Innova.Protocol.Operation), global::Innova.Protocol.Operation.Parser, new[]{ "Src", "Dest", "Ptype", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Innova.Protocol.PlayerToGate), global::Innova.Protocol.PlayerToGate.Parser, new[]{ "Type", "MagicNumber", "WatchingRegions", "EnteredRegions", "EnteredActors", "ExitedRegions", "ExitedActors", "UpdateActors", "PushOperations", "RequestProperty", "RequestConfig" }, null, new[]{ typeof(global::Innova.Protocol.PlayerToGate.Types.ETYPE) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Innova.Protocol.GateToPlayer), global::Innova.Protocol.GateToPlayer.Parser, new[]{ "Type", "WorldTime", "Exited", "Updated", "Operations", "ResponseProperty", "ResponseConfig" }, null, new[]{ typeof(global::Innova.Protocol.GateToPlayer.Types.ETYPE) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Innova.Protocol.LoginToPlayer), global::Innova.Protocol.LoginToPlayer.Parser, new[]{ "Type" }, null, new[]{ typeof(global::Innova.Protocol.LoginToPlayer.Types.ETYPE) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Innova.Protocol.PlayerToLogin), global::Innova.Protocol.PlayerToLogin.Parser, new[]{ "Type" }, null, new[]{ typeof(global::Innova.Protocol.PlayerToLogin.Types.ETYPE) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Innova.Protocol.WorldWrite), global::Innova.Protocol.WorldWrite.Parser, new[]{ "Type", "WorldTime" }, null, new[]{ typeof(global::Innova.Protocol.WorldWrite.Types.ETYPE) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Innova.Protocol.WorldRead), global::Innova.Protocol.WorldRead.Parser, new[]{ "Type" }, null, new[]{ typeof(global::Innova.Protocol.WorldRead.Types.ETYPE) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  alias
  /// </summary>
  public sealed partial class Region : pb::IMessage<Region> {
    private static readonly pb::MessageParser<Region> _parser = new pb::MessageParser<Region>(() => new Region());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Region> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Innova.Protocol.InnovaProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Region() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Region(Region other) : this() {
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Region Clone() {
      return new Region(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private string index_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Index {
      get { return index_; }
      set {
        index_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Region);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Region other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index.Length != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Region other) {
      if (other == null) {
        return;
      }
      if (other.Index.Length != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Index = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegionIdPair : pb::IMessage<RegionIdPair> {
    private static readonly pb::MessageParser<RegionIdPair> _parser = new pb::MessageParser<RegionIdPair>(() => new RegionIdPair());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegionIdPair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Innova.Protocol.InnovaProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionIdPair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionIdPair(RegionIdPair other) : this() {
      Region = other.region_ != null ? other.Region.Clone() : null;
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionIdPair Clone() {
      return new RegionIdPair(this);
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 1;
    private global::Innova.Protocol.Region region_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Innova.Protocol.Region Region {
      get { return region_; }
      set {
        region_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegionIdPair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegionIdPair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Region, other.Region)) return false;
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (region_ != null) hash ^= Region.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (region_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Region);
      }
      if (Id != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (region_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Region);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegionIdPair other) {
      if (other == null) {
        return;
      }
      if (other.region_ != null) {
        if (region_ == null) {
          region_ = new global::Innova.Protocol.Region();
        }
        Region.MergeFrom(other.Region);
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (region_ == null) {
              region_ = new global::Innova.Protocol.Region();
            }
            input.ReadMessage(region_);
            break;
          }
          case 16: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IdPtype : pb::IMessage<IdPtype> {
    private static readonly pb::MessageParser<IdPtype> _parser = new pb::MessageParser<IdPtype>(() => new IdPtype());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdPtype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Innova.Protocol.InnovaProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdPtype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdPtype(IdPtype other) : this() {
      id_ = other.id_;
      ptype_ = other.ptype_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdPtype Clone() {
      return new IdPtype(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ptype" field.</summary>
    public const int PtypeFieldNumber = 2;
    private int ptype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ptype {
      get { return ptype_; }
      set {
        ptype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IdPtype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IdPtype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Ptype != other.Ptype) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Ptype != 0) hash ^= Ptype.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Ptype != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ptype);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Ptype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ptype);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IdPtype other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Ptype != 0) {
        Ptype = other.Ptype;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Ptype = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IdCtype : pb::IMessage<IdCtype> {
    private static readonly pb::MessageParser<IdCtype> _parser = new pb::MessageParser<IdCtype>(() => new IdCtype());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdCtype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Innova.Protocol.InnovaProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdCtype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdCtype(IdCtype other) : this() {
      id_ = other.id_;
      ctype_ = other.ctype_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdCtype Clone() {
      return new IdCtype(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ctype" field.</summary>
    public const int CtypeFieldNumber = 2;
    private int ctype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ctype {
      get { return ctype_; }
      set {
        ctype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IdCtype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IdCtype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Ctype != other.Ctype) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Ctype != 0) hash ^= Ctype.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Ctype != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ctype);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Ctype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ctype);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IdCtype other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Ctype != 0) {
        Ctype = other.Ctype;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Ctype = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IdCtypeData : pb::IMessage<IdCtypeData> {
    private static readonly pb::MessageParser<IdCtypeData> _parser = new pb::MessageParser<IdCtypeData>(() => new IdCtypeData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdCtypeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Innova.Protocol.InnovaProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdCtypeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdCtypeData(IdCtypeData other) : this() {
      id_ = other.id_;
      ctype_ = other.ctype_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdCtypeData Clone() {
      return new IdCtypeData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ctype" field.</summary>
    public const int CtypeFieldNumber = 2;
    private int ctype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ctype {
      get { return ctype_; }
      set {
        ctype_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IdCtypeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IdCtypeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Ctype != other.Ctype) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Ctype != 0) hash ^= Ctype.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Ctype != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ctype);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Ctype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ctype);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IdCtypeData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Ctype != 0) {
        Ctype = other.Ctype;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Ctype = input.ReadInt32();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IdPtypeData : pb::IMessage<IdPtypeData> {
    private static readonly pb::MessageParser<IdPtypeData> _parser = new pb::MessageParser<IdPtypeData>(() => new IdPtypeData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdPtypeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Innova.Protocol.InnovaProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdPtypeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdPtypeData(IdPtypeData other) : this() {
      id_ = other.id_;
      ptype_ = other.ptype_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdPtypeData Clone() {
      return new IdPtypeData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ptype" field.</summary>
    public const int PtypeFieldNumber = 2;
    private int ptype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ptype {
      get { return ptype_; }
      set {
        ptype_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IdPtypeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IdPtypeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Ptype != other.Ptype) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Ptype != 0) hash ^= Ptype.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Ptype != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ptype);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Ptype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ptype);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IdPtypeData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Ptype != 0) {
        Ptype = other.Ptype;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Ptype = input.ReadInt32();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Actor : pb::IMessage<Actor> {
    private static readonly pb::MessageParser<Actor> _parser = new pb::MessageParser<Actor>(() => new Actor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Actor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Innova.Protocol.InnovaProtocolReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Actor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Actor(Actor other) : this() {
      id_ = other.id_;
      ptypes_ = other.ptypes_.Clone();
      pdatas_ = other.pdatas_.Clone();
      ctypes_ = other.ctypes_.Clone();
      cdatas_ = other.cdatas_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Actor Clone() {
      return new Actor(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ptypes" field.</summary>
    public const int PtypesFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_ptypes_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> ptypes_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Ptypes {
      get { return ptypes_; }
    }

    /// <summary>Field number for the "pdatas" field.</summary>
    public const int PdatasFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_pdatas_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> pdatas_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Pdatas {
      get { return pdatas_; }
    }

    /// <summary>Field number for the "ctypes" field.</summary>
    public const int CtypesFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_ctypes_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> ctypes_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///  Any time the player's Config changes,
    ///  it will be sent to Gate,
    ///  and the new Config will be recorded into database
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Ctypes {
      get { return ctypes_; }
    }

    /// <summary>Field number for the "cdatas" field.</summary>
    public const int CdatasFieldNumber = 5;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_cdatas_codec
        = pb::FieldCodec.ForBytes(42);
    private readonly pbc::RepeatedField<pb::ByteString> cdatas_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Cdatas {
      get { return cdatas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Actor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Actor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!ptypes_.Equals(other.ptypes_)) return false;
      if(!pdatas_.Equals(other.pdatas_)) return false;
      if(!ctypes_.Equals(other.ctypes_)) return false;
      if(!cdatas_.Equals(other.cdatas_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      hash ^= ptypes_.GetHashCode();
      hash ^= pdatas_.GetHashCode();
      hash ^= ctypes_.GetHashCode();
      hash ^= cdatas_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      ptypes_.WriteTo(output, _repeated_ptypes_codec);
      pdatas_.WriteTo(output, _repeated_pdatas_codec);
      ctypes_.WriteTo(output, _repeated_ctypes_codec);
      cdatas_.WriteTo(output, _repeated_cdatas_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      size += ptypes_.CalculateSize(_repeated_ptypes_codec);
      size += pdatas_.CalculateSize(_repeated_pdatas_codec);
      size += ctypes_.CalculateSize(_repeated_ctypes_codec);
      size += cdatas_.CalculateSize(_repeated_cdatas_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Actor other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      ptypes_.Add(other.ptypes_);
      pdatas_.Add(other.pdatas_);
      ctypes_.Add(other.ctypes_);
      cdatas_.Add(other.cdatas_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            ptypes_.AddEntriesFrom(input, _repeated_ptypes_codec);
            break;
          }
          case 26: {
            pdatas_.AddEntriesFrom(input, _repeated_pdatas_codec);
            break;
          }
          case 34:
          case 32: {
            ctypes_.AddEntriesFrom(input, _repeated_ctypes_codec);
            break;
          }
          case 42: {
            cdatas_.AddEntriesFrom(input, _repeated_cdatas_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActorList : pb::IMessage<ActorList> {
    private static readonly pb::MessageParser<ActorList> _parser = new pb::MessageParser<ActorList>(() => new ActorList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActorList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Innova.Protocol.InnovaProtocolReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorList(ActorList other) : this() {
      actors_ = other.actors_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorList Clone() {
      return new ActorList(this);
    }

    /// <summary>Field number for the "actors" field.</summary>
    public const int ActorsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Innova.Protocol.Actor> _repeated_actors_codec
        = pb::FieldCodec.ForMessage(10, global::Innova.Protocol.Actor.Parser);
    private readonly pbc::RepeatedField<global::Innova.Protocol.Actor> actors_ = new pbc::RepeatedField<global::Innova.Protocol.Actor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Innova.Protocol.Actor> Actors {
      get { return actors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActorList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActorList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!actors_.Equals(other.actors_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= actors_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      actors_.WriteTo(output, _repeated_actors_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += actors_.CalculateSize(_repeated_actors_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActorList other) {
      if (other == null) {
        return;
      }
      actors_.Add(other.actors_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            actors_.AddEntriesFrom(input, _repeated_actors_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegionActorPair : pb::IMessage<RegionActorPair> {
    private static readonly pb::MessageParser<RegionActorPair> _parser = new pb::MessageParser<RegionActorPair>(() => new RegionActorPair());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegionActorPair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Innova.Protocol.InnovaProtocolReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionActorPair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionActorPair(RegionActorPair other) : this() {
      Region = other.region_ != null ? other.Region.Clone() : null;
      Actor = other.actor_ != null ? other.Actor.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionActorPair Clone() {
      return new RegionActorPair(this);
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 1;
    private global::Innova.Protocol.Region region_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Innova.Protocol.Region Region {
      get { return region_; }
      set {
        region_ = value;
      }
    }

    /// <summary>Field number for the "actor" field.</summary>
    public const int ActorFieldNumber = 2;
    private global::Innova.Protocol.Actor actor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Innova.Protocol.Actor Actor {
      get { return actor_; }
      set {
        actor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegionActorPair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegionActorPair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Region, other.Region)) return false;
      if (!object.Equals(Actor, other.Actor)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (region_ != null) hash ^= Region.GetHashCode();
      if (actor_ != null) hash ^= Actor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (region_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Region);
      }
      if (actor_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Actor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (region_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Region);
      }
      if (actor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Actor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegionActorPair other) {
      if (other == null) {
        return;
      }
      if (other.region_ != null) {
        if (region_ == null) {
          region_ = new global::Innova.Protocol.Region();
        }
        Region.MergeFrom(other.Region);
      }
      if (other.actor_ != null) {
        if (actor_ == null) {
          actor_ = new global::Innova.Protocol.Actor();
        }
        Actor.MergeFrom(other.Actor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (region_ == null) {
              region_ = new global::Innova.Protocol.Region();
            }
            input.ReadMessage(region_);
            break;
          }
          case 18: {
            if (actor_ == null) {
              actor_ = new global::Innova.Protocol.Actor();
            }
            input.ReadMessage(actor_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IdList : pb::IMessage<IdList> {
    private static readonly pb::MessageParser<IdList> _parser = new pb::MessageParser<IdList>(() => new IdList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Innova.Protocol.InnovaProtocolReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdList(IdList other) : this() {
      ids_ = other.ids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdList Clone() {
      return new IdList(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_ids_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> ids_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IdList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IdList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IdList other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Operation : pb::IMessage<Operation> {
    private static readonly pb::MessageParser<Operation> _parser = new pb::MessageParser<Operation>(() => new Operation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Operation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Innova.Protocol.InnovaProtocolReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operation(Operation other) : this() {
      src_ = other.src_;
      dest_ = other.dest_;
      ptype_ = other.ptype_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operation Clone() {
      return new Operation(this);
    }

    /// <summary>Field number for the "src" field.</summary>
    public const int SrcFieldNumber = 1;
    private long src_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Src {
      get { return src_; }
      set {
        src_ = value;
      }
    }

    /// <summary>Field number for the "dest" field.</summary>
    public const int DestFieldNumber = 2;
    private long dest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Dest {
      get { return dest_; }
      set {
        dest_ = value;
      }
    }

    /// <summary>Field number for the "ptype" field.</summary>
    public const int PtypeFieldNumber = 3;
    private int ptype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ptype {
      get { return ptype_; }
      set {
        ptype_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Operation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Operation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Src != other.Src) return false;
      if (Dest != other.Dest) return false;
      if (Ptype != other.Ptype) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Src != 0L) hash ^= Src.GetHashCode();
      if (Dest != 0L) hash ^= Dest.GetHashCode();
      if (Ptype != 0) hash ^= Ptype.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Src != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Src);
      }
      if (Dest != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Dest);
      }
      if (Ptype != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ptype);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Src != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Src);
      }
      if (Dest != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Dest);
      }
      if (Ptype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ptype);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Operation other) {
      if (other == null) {
        return;
      }
      if (other.Src != 0L) {
        Src = other.Src;
      }
      if (other.Dest != 0L) {
        Dest = other.Dest;
      }
      if (other.Ptype != 0) {
        Ptype = other.Ptype;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Src = input.ReadInt64();
            break;
          }
          case 16: {
            Dest = input.ReadInt64();
            break;
          }
          case 24: {
            Ptype = input.ReadInt32();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  packages
  /// </summary>
  public sealed partial class PlayerToGate : pb::IMessage<PlayerToGate> {
    private static readonly pb::MessageParser<PlayerToGate> _parser = new pb::MessageParser<PlayerToGate>(() => new PlayerToGate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerToGate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Innova.Protocol.InnovaProtocolReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerToGate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerToGate(PlayerToGate other) : this() {
      type_ = other.type_;
      magicNumber_ = other.magicNumber_;
      watchingRegions_ = other.watchingRegions_.Clone();
      enteredRegions_ = other.enteredRegions_.Clone();
      enteredActors_ = other.enteredActors_.Clone();
      exitedRegions_ = other.exitedRegions_.Clone();
      exitedActors_ = other.exitedActors_.Clone();
      updateActors_ = other.updateActors_.Clone();
      pushOperations_ = other.pushOperations_.Clone();
      requestProperty_ = other.requestProperty_.Clone();
      requestConfig_ = other.requestConfig_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerToGate Clone() {
      return new PlayerToGate(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Innova.Protocol.PlayerToGate.Types.ETYPE type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Innova.Protocol.PlayerToGate.Types.ETYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "magic_number" field.</summary>
    public const int MagicNumberFieldNumber = 2;
    private int magicNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicNumber {
      get { return magicNumber_; }
      set {
        magicNumber_ = value;
      }
    }

    /// <summary>Field number for the "watching_regions" field.</summary>
    public const int WatchingRegionsFieldNumber = 101;
    private static readonly pb::FieldCodec<global::Innova.Protocol.Region> _repeated_watchingRegions_codec
        = pb::FieldCodec.ForMessage(810, global::Innova.Protocol.Region.Parser);
    private readonly pbc::RepeatedField<global::Innova.Protocol.Region> watchingRegions_ = new pbc::RepeatedField<global::Innova.Protocol.Region>();
    /// <summary>
    ///  watching regions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Innova.Protocol.Region> WatchingRegions {
      get { return watchingRegions_; }
    }

    /// <summary>Field number for the "entered_regions" field.</summary>
    public const int EnteredRegionsFieldNumber = 201;
    private static readonly pb::FieldCodec<global::Innova.Protocol.Region> _repeated_enteredRegions_codec
        = pb::FieldCodec.ForMessage(1610, global::Innova.Protocol.Region.Parser);
    private readonly pbc::RepeatedField<global::Innova.Protocol.Region> enteredRegions_ = new pbc::RepeatedField<global::Innova.Protocol.Region>();
    /// <summary>
    ///  actors enter regions, and request operations on the actor
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Innova.Protocol.Region> EnteredRegions {
      get { return enteredRegions_; }
    }

    /// <summary>Field number for the "entered_actors" field.</summary>
    public const int EnteredActorsFieldNumber = 202;
    private static readonly pb::FieldCodec<global::Innova.Protocol.ActorList> _repeated_enteredActors_codec
        = pb::FieldCodec.ForMessage(1618, global::Innova.Protocol.ActorList.Parser);
    private readonly pbc::RepeatedField<global::Innova.Protocol.ActorList> enteredActors_ = new pbc::RepeatedField<global::Innova.Protocol.ActorList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Innova.Protocol.ActorList> EnteredActors {
      get { return enteredActors_; }
    }

    /// <summary>Field number for the "exited_regions" field.</summary>
    public const int ExitedRegionsFieldNumber = 401;
    private static readonly pb::FieldCodec<global::Innova.Protocol.Region> _repeated_exitedRegions_codec
        = pb::FieldCodec.ForMessage(3210, global::Innova.Protocol.Region.Parser);
    private readonly pbc::RepeatedField<global::Innova.Protocol.Region> exitedRegions_ = new pbc::RepeatedField<global::Innova.Protocol.Region>();
    /// <summary>
    ///  actors exit regions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Innova.Protocol.Region> ExitedRegions {
      get { return exitedRegions_; }
    }

    /// <summary>Field number for the "exited_actors" field.</summary>
    public const int ExitedActorsFieldNumber = 402;
    private static readonly pb::FieldCodec<global::Innova.Protocol.IdList> _repeated_exitedActors_codec
        = pb::FieldCodec.ForMessage(3218, global::Innova.Protocol.IdList.Parser);
    private readonly pbc::RepeatedField<global::Innova.Protocol.IdList> exitedActors_ = new pbc::RepeatedField<global::Innova.Protocol.IdList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Innova.Protocol.IdList> ExitedActors {
      get { return exitedActors_; }
    }

    /// <summary>Field number for the "update_actors" field.</summary>
    public const int UpdateActorsFieldNumber = 301;
    private static readonly pb::FieldCodec<global::Innova.Protocol.Actor> _repeated_updateActors_codec
        = pb::FieldCodec.ForMessage(2410, global::Innova.Protocol.Actor.Parser);
    private readonly pbc::RepeatedField<global::Innova.Protocol.Actor> updateActors_ = new pbc::RepeatedField<global::Innova.Protocol.Actor>();
    /// <summary>
    ///  actors update
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Innova.Protocol.Actor> UpdateActors {
      get { return updateActors_; }
    }

    /// <summary>Field number for the "push_operations" field.</summary>
    public const int PushOperationsFieldNumber = 501;
    private static readonly pb::FieldCodec<global::Innova.Protocol.Operation> _repeated_pushOperations_codec
        = pb::FieldCodec.ForMessage(4010, global::Innova.Protocol.Operation.Parser);
    private readonly pbc::RepeatedField<global::Innova.Protocol.Operation> pushOperations_ = new pbc::RepeatedField<global::Innova.Protocol.Operation>();
    /// <summary>
    ///  push operations that affect others
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Innova.Protocol.Operation> PushOperations {
      get { return pushOperations_; }
    }

    /// <summary>Field number for the "request_property" field.</summary>
    public const int RequestPropertyFieldNumber = 601;
    private static readonly pb::FieldCodec<global::Innova.Protocol.IdPtype> _repeated_requestProperty_codec
        = pb::FieldCodec.ForMessage(4810, global::Innova.Protocol.IdPtype.Parser);
    private readonly pbc::RepeatedField<global::Innova.Protocol.IdPtype> requestProperty_ = new pbc::RepeatedField<global::Innova.Protocol.IdPtype>();
    /// <summary>
    ///  request Property
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Innova.Protocol.IdPtype> RequestProperty {
      get { return requestProperty_; }
    }

    /// <summary>Field number for the "request_config" field.</summary>
    public const int RequestConfigFieldNumber = 602;
    private static readonly pb::FieldCodec<global::Innova.Protocol.IdCtype> _repeated_requestConfig_codec
        = pb::FieldCodec.ForMessage(4818, global::Innova.Protocol.IdCtype.Parser);
    private readonly pbc::RepeatedField<global::Innova.Protocol.IdCtype> requestConfig_ = new pbc::RepeatedField<global::Innova.Protocol.IdCtype>();
    /// <summary>
    ///  request Config
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Innova.Protocol.IdCtype> RequestConfig {
      get { return requestConfig_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerToGate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerToGate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (MagicNumber != other.MagicNumber) return false;
      if(!watchingRegions_.Equals(other.watchingRegions_)) return false;
      if(!enteredRegions_.Equals(other.enteredRegions_)) return false;
      if(!enteredActors_.Equals(other.enteredActors_)) return false;
      if(!exitedRegions_.Equals(other.exitedRegions_)) return false;
      if(!exitedActors_.Equals(other.exitedActors_)) return false;
      if(!updateActors_.Equals(other.updateActors_)) return false;
      if(!pushOperations_.Equals(other.pushOperations_)) return false;
      if(!requestProperty_.Equals(other.requestProperty_)) return false;
      if(!requestConfig_.Equals(other.requestConfig_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (MagicNumber != 0) hash ^= MagicNumber.GetHashCode();
      hash ^= watchingRegions_.GetHashCode();
      hash ^= enteredRegions_.GetHashCode();
      hash ^= enteredActors_.GetHashCode();
      hash ^= exitedRegions_.GetHashCode();
      hash ^= exitedActors_.GetHashCode();
      hash ^= updateActors_.GetHashCode();
      hash ^= pushOperations_.GetHashCode();
      hash ^= requestProperty_.GetHashCode();
      hash ^= requestConfig_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (MagicNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MagicNumber);
      }
      watchingRegions_.WriteTo(output, _repeated_watchingRegions_codec);
      enteredRegions_.WriteTo(output, _repeated_enteredRegions_codec);
      enteredActors_.WriteTo(output, _repeated_enteredActors_codec);
      updateActors_.WriteTo(output, _repeated_updateActors_codec);
      exitedRegions_.WriteTo(output, _repeated_exitedRegions_codec);
      exitedActors_.WriteTo(output, _repeated_exitedActors_codec);
      pushOperations_.WriteTo(output, _repeated_pushOperations_codec);
      requestProperty_.WriteTo(output, _repeated_requestProperty_codec);
      requestConfig_.WriteTo(output, _repeated_requestConfig_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (MagicNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicNumber);
      }
      size += watchingRegions_.CalculateSize(_repeated_watchingRegions_codec);
      size += enteredRegions_.CalculateSize(_repeated_enteredRegions_codec);
      size += enteredActors_.CalculateSize(_repeated_enteredActors_codec);
      size += exitedRegions_.CalculateSize(_repeated_exitedRegions_codec);
      size += exitedActors_.CalculateSize(_repeated_exitedActors_codec);
      size += updateActors_.CalculateSize(_repeated_updateActors_codec);
      size += pushOperations_.CalculateSize(_repeated_pushOperations_codec);
      size += requestProperty_.CalculateSize(_repeated_requestProperty_codec);
      size += requestConfig_.CalculateSize(_repeated_requestConfig_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerToGate other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.MagicNumber != 0) {
        MagicNumber = other.MagicNumber;
      }
      watchingRegions_.Add(other.watchingRegions_);
      enteredRegions_.Add(other.enteredRegions_);
      enteredActors_.Add(other.enteredActors_);
      exitedRegions_.Add(other.exitedRegions_);
      exitedActors_.Add(other.exitedActors_);
      updateActors_.Add(other.updateActors_);
      pushOperations_.Add(other.pushOperations_);
      requestProperty_.Add(other.requestProperty_);
      requestConfig_.Add(other.requestConfig_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Innova.Protocol.PlayerToGate.Types.ETYPE) input.ReadEnum();
            break;
          }
          case 16: {
            MagicNumber = input.ReadInt32();
            break;
          }
          case 810: {
            watchingRegions_.AddEntriesFrom(input, _repeated_watchingRegions_codec);
            break;
          }
          case 1610: {
            enteredRegions_.AddEntriesFrom(input, _repeated_enteredRegions_codec);
            break;
          }
          case 1618: {
            enteredActors_.AddEntriesFrom(input, _repeated_enteredActors_codec);
            break;
          }
          case 2410: {
            updateActors_.AddEntriesFrom(input, _repeated_updateActors_codec);
            break;
          }
          case 3210: {
            exitedRegions_.AddEntriesFrom(input, _repeated_exitedRegions_codec);
            break;
          }
          case 3218: {
            exitedActors_.AddEntriesFrom(input, _repeated_exitedActors_codec);
            break;
          }
          case 4010: {
            pushOperations_.AddEntriesFrom(input, _repeated_pushOperations_codec);
            break;
          }
          case 4810: {
            requestProperty_.AddEntriesFrom(input, _repeated_requestProperty_codec);
            break;
          }
          case 4818: {
            requestConfig_.AddEntriesFrom(input, _repeated_requestConfig_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PlayerToGate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ETYPE {
        [pbr::OriginalName("NULL")] Null = 0,
        [pbr::OriginalName("MESSAGE")] Message = 1,
        [pbr::OriginalName("NUM")] Num = 2,
      }

    }
    #endregion

  }

  public sealed partial class GateToPlayer : pb::IMessage<GateToPlayer> {
    private static readonly pb::MessageParser<GateToPlayer> _parser = new pb::MessageParser<GateToPlayer>(() => new GateToPlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GateToPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Innova.Protocol.InnovaProtocolReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GateToPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GateToPlayer(GateToPlayer other) : this() {
      type_ = other.type_;
      worldTime_ = other.worldTime_;
      exited_ = other.exited_.Clone();
      updated_ = other.updated_.Clone();
      operations_ = other.operations_.Clone();
      responseProperty_ = other.responseProperty_.Clone();
      responseConfig_ = other.responseConfig_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GateToPlayer Clone() {
      return new GateToPlayer(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Innova.Protocol.GateToPlayer.Types.ETYPE type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Innova.Protocol.GateToPlayer.Types.ETYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "world_time" field.</summary>
    public const int WorldTimeFieldNumber = 2;
    private long worldTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorldTime {
      get { return worldTime_; }
      set {
        worldTime_ = value;
      }
    }

    /// <summary>Field number for the "exited" field.</summary>
    public const int ExitedFieldNumber = 101;
    private static readonly pb::FieldCodec<global::Innova.Protocol.RegionIdPair> _repeated_exited_codec
        = pb::FieldCodec.ForMessage(810, global::Innova.Protocol.RegionIdPair.Parser);
    private readonly pbc::RepeatedField<global::Innova.Protocol.RegionIdPair> exited_ = new pbc::RepeatedField<global::Innova.Protocol.RegionIdPair>();
    /// <summary>
    ///  actors exit region
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Innova.Protocol.RegionIdPair> Exited {
      get { return exited_; }
    }

    /// <summary>Field number for the "updated" field.</summary>
    public const int UpdatedFieldNumber = 201;
    private static readonly pb::FieldCodec<global::Innova.Protocol.RegionActorPair> _repeated_updated_codec
        = pb::FieldCodec.ForMessage(1610, global::Innova.Protocol.RegionActorPair.Parser);
    private readonly pbc::RepeatedField<global::Innova.Protocol.RegionActorPair> updated_ = new pbc::RepeatedField<global::Innova.Protocol.RegionActorPair>();
    /// <summary>
    ///  actors update
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Innova.Protocol.RegionActorPair> Updated {
      get { return updated_; }
    }

    /// <summary>Field number for the "operations" field.</summary>
    public const int OperationsFieldNumber = 301;
    private static readonly pb::FieldCodec<global::Innova.Protocol.Operation> _repeated_operations_codec
        = pb::FieldCodec.ForMessage(2410, global::Innova.Protocol.Operation.Parser);
    private readonly pbc::RepeatedField<global::Innova.Protocol.Operation> operations_ = new pbc::RepeatedField<global::Innova.Protocol.Operation>();
    /// <summary>
    ///  operations on the actors
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Innova.Protocol.Operation> Operations {
      get { return operations_; }
    }

    /// <summary>Field number for the "response_property" field.</summary>
    public const int ResponsePropertyFieldNumber = 401;
    private static readonly pb::FieldCodec<global::Innova.Protocol.IdPtypeData> _repeated_responseProperty_codec
        = pb::FieldCodec.ForMessage(3210, global::Innova.Protocol.IdPtypeData.Parser);
    private readonly pbc::RepeatedField<global::Innova.Protocol.IdPtypeData> responseProperty_ = new pbc::RepeatedField<global::Innova.Protocol.IdPtypeData>();
    /// <summary>
    ///  response Property
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Innova.Protocol.IdPtypeData> ResponseProperty {
      get { return responseProperty_; }
    }

    /// <summary>Field number for the "response_config" field.</summary>
    public const int ResponseConfigFieldNumber = 402;
    private static readonly pb::FieldCodec<global::Innova.Protocol.IdCtypeData> _repeated_responseConfig_codec
        = pb::FieldCodec.ForMessage(3218, global::Innova.Protocol.IdCtypeData.Parser);
    private readonly pbc::RepeatedField<global::Innova.Protocol.IdCtypeData> responseConfig_ = new pbc::RepeatedField<global::Innova.Protocol.IdCtypeData>();
    /// <summary>
    ///  response Config
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Innova.Protocol.IdCtypeData> ResponseConfig {
      get { return responseConfig_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GateToPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GateToPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (WorldTime != other.WorldTime) return false;
      if(!exited_.Equals(other.exited_)) return false;
      if(!updated_.Equals(other.updated_)) return false;
      if(!operations_.Equals(other.operations_)) return false;
      if(!responseProperty_.Equals(other.responseProperty_)) return false;
      if(!responseConfig_.Equals(other.responseConfig_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (WorldTime != 0L) hash ^= WorldTime.GetHashCode();
      hash ^= exited_.GetHashCode();
      hash ^= updated_.GetHashCode();
      hash ^= operations_.GetHashCode();
      hash ^= responseProperty_.GetHashCode();
      hash ^= responseConfig_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (WorldTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(WorldTime);
      }
      exited_.WriteTo(output, _repeated_exited_codec);
      updated_.WriteTo(output, _repeated_updated_codec);
      operations_.WriteTo(output, _repeated_operations_codec);
      responseProperty_.WriteTo(output, _repeated_responseProperty_codec);
      responseConfig_.WriteTo(output, _repeated_responseConfig_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (WorldTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorldTime);
      }
      size += exited_.CalculateSize(_repeated_exited_codec);
      size += updated_.CalculateSize(_repeated_updated_codec);
      size += operations_.CalculateSize(_repeated_operations_codec);
      size += responseProperty_.CalculateSize(_repeated_responseProperty_codec);
      size += responseConfig_.CalculateSize(_repeated_responseConfig_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GateToPlayer other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.WorldTime != 0L) {
        WorldTime = other.WorldTime;
      }
      exited_.Add(other.exited_);
      updated_.Add(other.updated_);
      operations_.Add(other.operations_);
      responseProperty_.Add(other.responseProperty_);
      responseConfig_.Add(other.responseConfig_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Innova.Protocol.GateToPlayer.Types.ETYPE) input.ReadEnum();
            break;
          }
          case 16: {
            WorldTime = input.ReadInt64();
            break;
          }
          case 810: {
            exited_.AddEntriesFrom(input, _repeated_exited_codec);
            break;
          }
          case 1610: {
            updated_.AddEntriesFrom(input, _repeated_updated_codec);
            break;
          }
          case 2410: {
            operations_.AddEntriesFrom(input, _repeated_operations_codec);
            break;
          }
          case 3210: {
            responseProperty_.AddEntriesFrom(input, _repeated_responseProperty_codec);
            break;
          }
          case 3218: {
            responseConfig_.AddEntriesFrom(input, _repeated_responseConfig_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GateToPlayer message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ETYPE {
        [pbr::OriginalName("NULL")] Null = 0,
        [pbr::OriginalName("MESSAGE")] Message = 1,
        [pbr::OriginalName("NUM")] Num = 2,
      }

    }
    #endregion

  }

  public sealed partial class LoginToPlayer : pb::IMessage<LoginToPlayer> {
    private static readonly pb::MessageParser<LoginToPlayer> _parser = new pb::MessageParser<LoginToPlayer>(() => new LoginToPlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginToPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Innova.Protocol.InnovaProtocolReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginToPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginToPlayer(LoginToPlayer other) : this() {
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginToPlayer Clone() {
      return new LoginToPlayer(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Innova.Protocol.LoginToPlayer.Types.ETYPE type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Innova.Protocol.LoginToPlayer.Types.ETYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginToPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginToPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginToPlayer other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Innova.Protocol.LoginToPlayer.Types.ETYPE) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LoginToPlayer message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ETYPE {
        [pbr::OriginalName("ACCEPT")] Accept = 0,
      }

    }
    #endregion

  }

  public sealed partial class PlayerToLogin : pb::IMessage<PlayerToLogin> {
    private static readonly pb::MessageParser<PlayerToLogin> _parser = new pb::MessageParser<PlayerToLogin>(() => new PlayerToLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerToLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Innova.Protocol.InnovaProtocolReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerToLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerToLogin(PlayerToLogin other) : this() {
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerToLogin Clone() {
      return new PlayerToLogin(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Innova.Protocol.PlayerToLogin.Types.ETYPE type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Innova.Protocol.PlayerToLogin.Types.ETYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerToLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerToLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerToLogin other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Innova.Protocol.PlayerToLogin.Types.ETYPE) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PlayerToLogin message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ETYPE {
        [pbr::OriginalName("LOGIN")] Login = 0,
      }

    }
    #endregion

  }

  public sealed partial class WorldWrite : pb::IMessage<WorldWrite> {
    private static readonly pb::MessageParser<WorldWrite> _parser = new pb::MessageParser<WorldWrite>(() => new WorldWrite());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorldWrite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Innova.Protocol.InnovaProtocolReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldWrite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldWrite(WorldWrite other) : this() {
      type_ = other.type_;
      worldTime_ = other.worldTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldWrite Clone() {
      return new WorldWrite(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Innova.Protocol.WorldWrite.Types.ETYPE type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Innova.Protocol.WorldWrite.Types.ETYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "world_time" field.</summary>
    public const int WorldTimeFieldNumber = 2;
    private long worldTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorldTime {
      get { return worldTime_; }
      set {
        worldTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorldWrite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorldWrite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (WorldTime != other.WorldTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (WorldTime != 0L) hash ^= WorldTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (WorldTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(WorldTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (WorldTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorldTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorldWrite other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.WorldTime != 0L) {
        WorldTime = other.WorldTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Innova.Protocol.WorldWrite.Types.ETYPE) input.ReadEnum();
            break;
          }
          case 16: {
            WorldTime = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the WorldWrite message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ETYPE {
        [pbr::OriginalName("PING")] Ping = 0,
      }

    }
    #endregion

  }

  public sealed partial class WorldRead : pb::IMessage<WorldRead> {
    private static readonly pb::MessageParser<WorldRead> _parser = new pb::MessageParser<WorldRead>(() => new WorldRead());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorldRead> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Innova.Protocol.InnovaProtocolReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldRead() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldRead(WorldRead other) : this() {
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldRead Clone() {
      return new WorldRead(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Innova.Protocol.WorldRead.Types.ETYPE type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Innova.Protocol.WorldRead.Types.ETYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorldRead);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorldRead other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorldRead other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Innova.Protocol.WorldRead.Types.ETYPE) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the WorldRead message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ETYPE {
        [pbr::OriginalName("PONG")] Pong = 0,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
